/Users/OrenMe/repos/playkit-js/src/player.js
--- old
+++ new
@@ -308,7 +308,7 @@
    * @public
    */
   play(): void {
-    if (this._engine) {
+    if (this._engine) : void{
       this._playbackMiddleware.play(this._play.bind(this));
     }
   }
@@ -349,7 +349,7 @@
    * @public
    */
   destroy(): void {
-    if (this._engine) {
+    if (this._engine) : void{
       this._engine.destroy();
     }
     this._posterManager.destroy();
@@ -364,7 +364,7 @@
     this._streamType = '';
     this._readyPromise = null;
     this._firstPlay = true;
-    if (this._el) {
+    if (this._el) : void{
       Utils.Dom.removeChild(this._el.parentNode, this._el);
     }
   }
@@ -378,7 +378,7 @@
    * @public
    */
   set currentTime(to: number): void {
-    if (this._engine) {
+    if (this._engine) : void{
       if (Utils.Number.isNumber(to)) {
         let boundedTo: number = to;
         if (to < 0) {
@@ -421,9 +421,9 @@
    * @public
    */
   set volume(vol: number): void {
-    if (this._engine) {
+    if (this._engine) : void{
       if (Utils.Number.isFloat(vol) || (vol === 0) || (vol === 1)) {
-        let boundedVol = vol;
+        let boundedVol: number = vol;
         if (boundedVol < 0) {
           boundedVol = 0;
         }
@@ -475,7 +475,7 @@
    * @param {boolean} playsinline - Whether the video should plays in line.
    */
   set playsinline(playsinline: boolean): void {
-    if (this._engine) {
+    if (this._engine) : void{
       this._engine.playsinline = playsinline;
     }
   }
@@ -499,7 +499,7 @@
    * @public
    */
   set muted(mute: boolean): void {
-    if (this._engine) {
+    if (this._engine) : void{
       this._engine.muted = mute;
       this.dispatchEvent(new FakeEvent(CustomEvents.MUTE_CHANGE, {mute: mute}));
     }
@@ -552,7 +552,7 @@
    * @param {number} rate - The playback speed of the video.
    */
   set playbackRate(rate: number): void {
-    if (this._engine) {
+    if (this._engine) : void{
       this._engine.playbackRate = rate;
     }
   }
@@ -643,7 +643,7 @@
    * @public
    */
   seekToLiveEdge(): void {
-    if (this._engine && this.isLive()) {
+    if (this._engine && this.isLive(): void) {
       this._engine.seekToLiveEdge();
     }
   }
@@ -917,7 +917,7 @@
    * @returns {void}
    */
   _createReadyPromise(): void {
-    this._readyPromise = new Promise((resolve, reject) => {
+    this._readyPromise = new Promise((resolve: (result: FakeEvent | Promise<FakeEvent>) => void, reject: (error: any) => void) => : void{
       this._eventManager.listen(this, CustomEvents.TRACKS_CHANGED, resolve);
       this._eventManager.listen(this, Html5Events.ERROR, reject);
     });
@@ -983,8 +983,8 @@
    */
   _attachMedia(): void {
     if (this._engine) {
-      Object.keys(Html5Events).forEach((html5Event) => {
-        this._eventManager.listen(this._engine, Html5Events[html5Event], (event: FakeEvent) => {
+      Object.keys(Html5Events).forEach((html5Event: string) => : void{
+        this._eventManager.listen(this._engine, Html5Events[html5Event], (event: FakeEvent) => : boolean{
           return this.dispatchEvent(event);
         });
       });
