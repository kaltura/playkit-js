//@flow
import VideoTrack from '../../src/track/video-track';
import AudioTrack from '../../src/track/audio-track';
import TextTrack from '../../src/track/text-track';
import FakeEvent from '../../src/event/fake-event';

declare interface IEngineDecorator {
  +active: boolean;
  dispatchEvent(event: FakeEvent): boolean;
  +restore?: (source: PKMediaSourceObject, config: Object) => void;
  +reset?: () => void;
  +destroy?: () => void;
  +attach?: () => void;
  +detach?: () => void;
  +getVideoElement?: () => HTMLVideoElement;
  +selectVideoTrack?: (videoTrack: VideoTrack) => void;
  +selectAudioTrack?: (audioTrack: AudioTrack) => void;
  +selectTextTrack?: (textTrack: TextTrack) => void;
  +hideTextTrack?: () => void;
  +enableAdaptiveBitrate?: () => void;
  +isAdaptiveBitrateEnabled?: () => boolean;
  +seekToLiveEdge?: () => void;
  +getStartTimeOfDvrWindow?: () => number;
  +isLive?: () => boolean;
  +play?: () => void;
  +pause?: () => void;
  +load?: (startTime: ?number) => Promise<Object>;
  +enterPictureInPicture?: () => void;
  +exitPictureInPicture?: () => void;
  +isPictureInPictureSupported?: () => boolean;
  +resetAllCues?: () => void;
  +attachMediaSource?: (playbackEnded: ?boolean) => void;
  +detachMediaSource?: (playbackEnded: ?boolean) => void;
  +id?: string;
  src?: string;
  currentTime?: number;
  +duration?: number;
  volume?: number;
  +paused?: boolean;
  +seeking?: boolean;
  +seekable?: TimeRanges;
  +played?: TimeRanges;
  +buffered?: TimeRanges;
  muted?: boolean;
  +defaultMuted?: boolean;
  poster?: string;
  preload?: string;
  autoplay?: boolean;
  loop?: boolean;
  controls?: boolean;
  +playbackRates?: Array<number>;
  playbackRate?: number;
  defaultPlaybackRate?: number;
  +ended?: boolean;
  +error?: ?MediaError;
  +networkState?: number;
  +readyState?: number;
  +videoHeight?: number;
  +videoWidth?: number;
  playsinline?: boolean;
  crossOrigin?: ?string;
  +isInPictureInPicture?: boolean;
  +targetBuffer?: number;
  +availableBuffer?: number;
}
